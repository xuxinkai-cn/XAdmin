<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.xuxinkai.cms.dao.CmsArticleDao">

    <resultMap id="BaseResultMap" type="cn.xuxinkai.cms.entity.CmsArticle">
        <!--@Table cms_article-->
        <result property="articleId" column="article_id" jdbcType="INTEGER"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
        <result property="coverUrl" column="cover_url" jdbcType="VARCHAR"/>
        <result property="summary" column="summary" jdbcType="VARCHAR"/>
        <result property="contentMarkdown" column="content_markdown" jdbcType="OTHER"/>
        <result property="contentHtml" column="content_html" jdbcType="OTHER"/>
        <result property="commentNum" column="comment_num" jdbcType="INTEGER"/>
        <result property="viewNum" column="view_num" jdbcType="INTEGER"/>
        <result property="status" column="status" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="createBy" column="create_by" jdbcType="VARCHAR"/>
        <result property="updateBy" column="update_by" jdbcType="VARCHAR"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="BaseResultMap">
        select
          article_id, title, cover_url, summary, content_markdown, content_html, comment_num, view_num, status, create_time, update_time, create_by, update_by
        from cms_article
        where article_id = #{articleId}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="BaseResultMap">
        select
          article_id, title, cover_url, summary, content_markdown, content_html, comment_num, view_num, status, create_time, update_time, create_by, update_by
        from cms_article
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="BaseResultMap">
        select
          article_id, title, cover_url, summary, content_markdown, content_html, comment_num, view_num, status, create_time, update_time, create_by, update_by
        from cms_article
        <where>
            <if test="articleId != null">
                and article_id = #{articleId}
            </if>
            <if test="title != null and title != ''">
                and title = #{title}
            </if>
            <if test="coverUrl != null and coverUrl != ''">
                and cover_url = #{coverUrl}
            </if>
            <if test="summary != null and summary != ''">
                and summary = #{summary}
            </if>
            <if test="contentMarkdown != null">
                and content_markdown = #{contentMarkdown}
            </if>
            <if test="contentHtml != null">
                and content_html = #{contentHtml}
            </if>
            <if test="commentNum != null">
                and comment_num = #{commentNum}
            </if>
            <if test="viewNum != null">
                and view_num = #{viewNum}
            </if>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
            <if test="updateTime != null">
                and update_time = #{updateTime}
            </if>
            <if test="createBy != null and createBy != ''">
                and create_by = #{createBy}
            </if>
            <if test="updateBy != null and updateBy != ''">
                and update_by = #{updateBy}
            </if>
        </where>
    </select>

    <!--分页联表查询文章列表-->
    <select id="queryAllByPageUtil" resultType="cn.xuxinkai.cms.dto.ArticleWithCategoryDto">
        select DISTINCT a.article_id, a.title, a.cover_url, a.summary, a.content_markdown, a.content_html, a.comment_num, a.view_num, a.status, a.create_time, a.update_time, a.create_by, a.update_by,c.category_id,c.category_name,c.category_slug,category_des,article_num
        from cms_article a
        LEFT JOIN cms_category_article r
        on a.article_id = r.article_id
        LEFT JOIN cms_category c
        on r.category_id = c.category_id
        <if test="field!=null">
            where
            <foreach collection="field.entrySet()" item="item" index="key" separator="and">
                ${key} = #{item}
            </foreach>
        </if>
        <if test="orderByClaus != null">
            order by ${orderByClaus}
        </if>
        <if test="start!=null and pageSize!=null">
            limit #{start},#{pageSize}
        </if>
    </select>

    <select id="queryTotalByField" resultType="java.lang.Long">
        select count(*)
        from cms_article
        <if test="fieldParams != null ">
            where
            <foreach collection="fieldParams.entrySet()" item="item" index="key" separator="and">
                ${key} = #{item}
            </foreach>
        </if>
    </select>

    <!--获取当前文章的上一篇文章-->
    <select id="queryBeforeArticle" resultMap="BaseResultMap">
        select
        article_id, title, cover_url, summary, content_markdown, content_html, comment_num, view_num, status, create_time, update_time, create_by, update_by
        from cms_article
        WHERE article_id &lt; #{articleId} and status = 0 ORDER BY article_id DESC LIMIT 1 ;
    </select>

    <!--获取当前文章的下一篇文章-->
    <select id="queryAfterArticle" resultMap="BaseResultMap">
        select
         article_id, title, cover_url, summary, content_markdown, content_html, comment_num, view_num, status, create_time, update_time, create_by, update_by
        from cms_article WHERE article_id &gt; #{articleId} and status = 0 ORDER BY article_id asc LIMIT 1 ;
    </select>


    <select id="queryYearAndMonth" resultType="cn.xuxinkai.cms.dto.ArchiveDto">
        SELECT DISTINCT YEAR(create_time) AS `year`,MONTH(create_time) as `month`  from cms_article;
    </select>

    <!--获取指定日期文章-->
    <select id="queryArticleByYearAndMonth" resultMap="BaseResultMap">
        select  article_id, title, cover_url, summary, content_markdown, content_html, comment_num, view_num, status, create_time, update_time, create_by, update_by
         from cms_article
         where YEAR(create_time) = #{year} AND MONTH(create_time) = #{month};
    </select>

    <!--分页查询指定tag下文章-->
    <select id="queryAllByPageUtilAndTag" resultType="cn.xuxinkai.cms.dto.ArticleWithCategoryDto">
        select DISTINCT a.article_id, a.title, a.cover_url, a.summary, a.content_markdown, a.content_html, a.comment_num, a.view_num, a.status, a.create_time, a.update_time, a.create_by, a.update_by,c.category_id,c.category_name,c.category_slug,category_des,article_num
        from cms_article a
        LEFT JOIN cms_category_article r
        on a.article_id = r.article_id
        LEFT JOIN cms_category c
        on r.category_id = c.category_id
        LEFT JOIN cms_tag_article m
        on a.article_id = m.article_id
        <if test="field!=null">
            where
            <foreach collection="field.entrySet()" item="item" index="key" separator="and">
                ${key} = #{item}
            </foreach>
        </if>
        <if test="orderByClaus != null">
            order by ${orderByClaus}
        </if>
        <if test="start!=null and pageSize!=null">
            limit #{start},#{pageSize}
        </if>
    </select>

    <!--获取指定tag下文章数量-->
    <select id="queryTotalByFieldAndTag" resultType="java.lang.Long">
        SELECT count(*) from cms_article a
        LEFT JOIN cms_tag_article m
        on a.article_id = m.article_id
        <if test="fieldParams != null ">
            where
            <foreach collection="fieldParams.entrySet()" item="item" index="key" separator="and">
                ${key} = #{item}
            </foreach>
        </if>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="articleId" useGeneratedKeys="true">
        insert into cms_article(title, cover_url, summary, content_markdown, content_html, comment_num, view_num, status, create_time, update_time, create_by, update_by)
        values (#{title}, #{coverUrl}, #{summary}, #{contentMarkdown}, #{contentHtml}, #{commentNum}, #{viewNum}, #{status}, #{createTime}, #{updateTime}, #{createBy}, #{updateBy})
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update cms_article
        <set>
            <if test="title != null and title != ''">
                title = #{title},
            </if>
            <if test="coverUrl != null and coverUrl != ''">
                cover_url = #{coverUrl},
            </if>
            <if test="summary != null and summary != ''">
                summary = #{summary},
            </if>
            <if test="contentMarkdown != null">
                content_markdown = #{contentMarkdown},
            </if>
            <if test="contentHtml != null">
                content_html = #{contentHtml},
            </if>
            <if test="commentNum != null">
                comment_num = #{commentNum},
            </if>
            <if test="viewNum != null">
                view_num = #{viewNum},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="createBy != null and createBy != ''">
                create_by = #{createBy},
            </if>
            <if test="updateBy != null and updateBy != ''">
                update_by = #{updateBy},
            </if>
        </set>
        where article_id = #{articleId}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from cms_article where article_id = #{articleId}
    </delete>

</mapper>